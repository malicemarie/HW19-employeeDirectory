{"version":3,"sources":["components/header.jsx","components/search.jsx","components/Results.jsx","components/trackerComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","handleInputChange","htmlFor","type","id","onChange","name","placeholder","Results","persons","filteredPersons","scope","map","person","index","key","src","picture","medium","alt","first","phone","email","dob","date","slice","Tracker","state","event","searchInput","target","value","filter","toLowerCase","console","log","indexOf","setState","axios","get","then","data","results","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gXAaeA,MAXf,WACE,OACE,gCACE,yBAAKC,UAAU,kBACZ,IACD,uBAAGA,UAAU,cAAb,sBACA,yE,MCmBOC,MAxBf,YAAwC,IAAtBC,EAAqB,EAArBA,kBAChB,OACE,6BACE,yBAAKF,UAAU,cACb,2BAAOA,UAAU,YAAYG,QAAQ,OAArC,OAGA,2BACEC,KAAK,OACLC,GAAG,MACHC,SAAUJ,EACVK,KAAK,QAEP,2BAAOH,KAAK,OAAOC,GAAG,UAAUE,KAAK,YACrC,2BACEH,KAAK,OACLI,YAAY,cACZF,SAAUJ,O,MCyBLO,MAtCf,cAAoD,IAAjCC,EAAgC,EAAhCA,QACjB,OADiD,EAAnBC,gBAE5B,yBAAKX,UAAU,aACZ,IACD,yBAAKA,UAAU,iBACb,2BAAOA,UAAU,iDACf,+BACE,4BACE,wBAAIY,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGF,EAAQG,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAIC,IAAKD,GACP,4BACE,yBAAKE,IAAKH,EAAOI,QAAQC,OAAQC,IAAI,UAAW,KAElD,4BAAKN,EAAOP,KAAKc,OACjB,4BAAKP,EAAOQ,OACZ,4BAAKR,EAAOS,OACZ,4BAAKT,EAAOU,IAAIC,KAAKC,MAAM,EAAG,c,iBCiB/BC,E,4MAzCbC,MAAQ,CACNlB,QAAS,GACTC,gBAAiB,I,EAanBT,kBAAoB,SAAC2B,GACnB,IAAMC,EAAcD,EAAME,OAAOC,MAC3BrB,EAAkB,EAAKiB,MAAMlB,QAAQuB,QAAO,SAACnB,GACjD,IAAIP,EAAOO,EAAOP,KAAKc,MAAMa,cAI7B,OAHAC,QAAQC,WAAW7B,IAC+C,IAA7CA,EAAK8B,QAAQP,EAAYI,kBAMhD,EAAKI,SAAS,CACZ3B,gBAAiBA,K,kEAtBA,IAAD,OAClB4B,IAAMC,IAAI,yCAAyCC,MAAK,YAAe,IAC/D/B,EAD8D,EAAXgC,KACpCC,QACrB,EAAKL,SAAS,CACZ5B,QAASA,EACTC,gBAAiBD,S,+BAsBrB,OACE,6BACE,kBAAC,EAAD,MADF,IACa,kBAAC,EAAD,CAAQR,kBAAmB0C,KAAK1C,oBAC3C,kBAAC,EAAD,CAASQ,QAASkC,KAAKhB,MAAMjB,uB,GApCfkC,a,MCuBPC,MAzBf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.5335a7bb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/header.css\";\nfunction Header() {\n  return (\n    <header>\n      <div className=\"header-message\">\n        {\" \"}\n        <p className=\"head-title\">Employee Directory</p>\n        <p>Use the search fields to modify results</p>\n      </div>\n    </header>\n  );\n}\nexport default Header;\n","import React from \"react\";\nimport \"../styles/search.css\";\n\nfunction Search({ handleInputChange }) {\n  return (\n    <div>\n      <div className=\"search-bar\">\n        <label className=\"dob-label\" htmlFor=\"dob\">\n          DOB\n        </label>\n        <input\n          type=\"date\"\n          id=\"dob\"\n          onChange={handleInputChange}\n          name=\"dob\"\n        ></input>\n        <input type=\"date\" id=\"enddate\" name=\"enddate\"></input>\n        <input\n          type=\"text\"\n          placeholder=\"Search here\"\n          onChange={handleInputChange}\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"../styles/resultsList.css\";\n\n// import Col from \"./col\";\n// import Row from \"./row\";\n// import Search from \"./search\";\n\nfunction Results({ persons }, { filteredPersons }) {\n  return (\n    <div className=\"container\">\n      {\" \"}\n      <div className=\"results-table\">\n        <table className=\"table table-striped table-dark table-sortable\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Image</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Phone</th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">DOB</th>\n            </tr>\n          </thead>\n          <tbody>\n            {persons.map((person, index) => (\n              <tr key={index}>\n                <td>\n                  <img src={person.picture.medium} alt=\"thumb\" />{\" \"}\n                </td>\n                <td>{person.name.first}</td>\n                <td>{person.phone}</td>\n                <td>{person.email}</td>\n                <td>{person.dob.date.slice(0, 10)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* <Row>\n          <Col size=\"md-8\"></Col>\n          <Col size=\"md-4\"></Col>\n        </Row> */}\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport Search from \"./search\";\nimport Results from \"./Results\";\nimport axios from \"axios\";\n\nclass Tracker extends Component {\n  state = {\n    persons: [],\n    filteredPersons: [],\n  };\n\n  componentDidMount() {\n    axios.get(\"https://randomuser.me/api/?results=50\").then(({ data }) => {\n      const persons = data.results;\n      this.setState({\n        persons: persons,\n        filteredPersons: persons,\n      });\n    });\n  }\n\n  handleInputChange = (event) => {\n    const searchInput = event.target.value;\n    const filteredPersons = this.state.persons.filter((person) => {\n      let name = person.name.first.toLowerCase();\n      console.log(typeof name);\n      const matchPersons = name.indexOf(searchInput.toLowerCase()) !== -1;\n\n      return matchPersons;\n    });\n\n    // Updating the input's state\n    this.setState({\n      filteredPersons: filteredPersons,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header /> <Search handleInputChange={this.handleInputChange} />\n        <Results persons={this.state.filteredPersons} />\n      </div>\n    );\n  }\n}\n\nexport default Tracker;\n","import React from \"react\";\nimport Tracker from \"./components/trackerComponent\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Tracker />\n\n    // <ResultsList/>\n    // <Search/>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}